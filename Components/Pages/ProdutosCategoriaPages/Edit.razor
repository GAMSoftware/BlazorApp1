@page "/ProdutosCategoria/edit"
@inject BlazorApp1.Data.BlazorApp1Context DB
@using BlazorApp1.Models
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>ProdutosCategoria</h4>
<hr />
@if (ProdutosCategoria is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="ProdutosCategoria" OnValidSubmit="UpdateProdutosCategoria" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="ProdutosCategoria.Id" value="@ProdutosCategoria.Id" />
                <div class="mb-3">
                    <label for="descricao" class="form-label">Descricao:</label>
                    <InputText id="descricao" @bind-Value="ProdutosCategoria.Descricao" class="form-control" />
                    <ValidationMessage For="() => ProdutosCategoria.Descricao" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="ativa" class="form-label">Ativa:</label>
                    <InputText id="ativa" @bind-Value="ProdutosCategoria.Ativa" class="form-control" />
                    <ValidationMessage For="() => ProdutosCategoria.Ativa" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="cadastrado_usuario" class="form-label">Cadastrado_Usuario:</label>
                    <InputNumber id="cadastrado_usuario" @bind-Value="ProdutosCategoria.Cadastrado_Usuario" class="form-control" />
                    <ValidationMessage For="() => ProdutosCategoria.Cadastrado_Usuario" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="cadastrado_data" class="form-label">Cadastrado_Data:</label>
                    <InputDate id="cadastrado_data" @bind-Value="ProdutosCategoria.Cadastrado_Data" class="form-control" />
                    <ValidationMessage For="() => ProdutosCategoria.Cadastrado_Data" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="alterado_usuario" class="form-label">Alterado_Usuario:</label>
                    <InputNumber id="alterado_usuario" @bind-Value="ProdutosCategoria.Alterado_Usuario" class="form-control" />
                    <ValidationMessage For="() => ProdutosCategoria.Alterado_Usuario" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="alterado_data" class="form-label">Alterado_Data:</label>
                    <InputDate id="alterado_data" @bind-Value="ProdutosCategoria.Alterado_Data" class="form-control" />
                    <ValidationMessage For="() => ProdutosCategoria.Alterado_Data" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/produtoscategoria">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public ProdutosCategoria? ProdutosCategoria { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ProdutosCategoria ??= await DB.ProdutosCategoria.FirstOrDefaultAsync(m => m.Id == Id);

        if (ProdutosCategoria is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateProdutosCategoria()
    {
        DB.Attach(ProdutosCategoria!).State = EntityState.Modified;

        try
        {
            await DB.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!ProdutosCategoriaExists(ProdutosCategoria!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/produtoscategoria");
    }

    bool ProdutosCategoriaExists(int id)
    {
        return DB.ProdutosCategoria.Any(e => e.Id == id);
    }
}
